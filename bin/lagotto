#!/usr/bin/env ruby

require "thor"
require "lagotto-rb"
require "multi_json"

class Lg < Thor
  include Thor::Actions
  # class_option :json, :type => :boolean, :default => false

  desc "works [ids]", "Get works by ids"
  long_desc <<-LONGDESC
    `lagotto works` accepts one or more ids to search for works

    Toggle `json` to get simplified (summary) or complete output (JSON)

    # A single id
    \x5$ lagotto works http://doi.org/10.1371/journal.pone.0025110

    DOI: 10.1371/journal.pone.0033693
    \x5type: journal-article
    \x5title: Methylphenidate Exposure Induces Dopamine Neuron Loss and Activation of Microglia in the Basal Ganglia of Mice

    # No ids
    \x5$ lagotto works --limit=2

    DOI: 10.1371/journal.pone.0146052
    \x5id: http://doi.org/10.1371/journal.pone.0146052
    \x5title: What Do We Learn from Spheroid Culture Systems? Insights from Tumorspheres Derived from Primary Colon Cancer Tissue

    DOI: 10.1371/journal.pone.0145401
    \x5id: http://doi.org/10.1371/journal.pone.0145401
    \x5title: Social Factors Influencing Child Health in Ghana

    # JSON output
    \x5$ lagotto works --limit=2 --json

    {"meta":{"status":"ok","message-type":"work-list", ...

    # JSON output, parse with jq
    \x5$ lagotto works --limit=2 --json | jq .works[].DOI

    "10.1371/journal.pgen.1005692"
    \x5"10.1371/journal.pgen.1005425"
  LONGDESC
  option :limit, :type => :numeric, :default => 50
  option :json, :type => :boolean, :default => false
  def works(ids = nil)
    puts ids
    out = Lagotto.works(ids: ids, per_page: options[:limit])
    if !options[:json]
      if ids.nil?
        out = out['works'].collect { |x| x.select { |k,v| k[/DOI|id|^title$/] } }
      else
        out = [out['works'][0].select { |k,v| k[/DOI|id|^title$/] }]
      end
      out.each do |x|
        puts 'DOI: ' + x['DOI'].to_s
        puts 'id: ' + x['id']
        puts 'title: ' + x['title']
        puts
      end
    else
      puts MultiJson.encode(out)
    end
  end

  desc "version", "Get lagotto-rb version"
  def version
    puts Lagotto::VERSION
  end

  private

  def print_works(data)
    if data.is_a? Array
      data = data[0]['message']['items']
    else
      data = data.collect { |x| x['message'].select { |k,v| k[/DOI|type|title/] } }
    end
    data.each do |x|
      puts 'DOI: ' + x['DOI']
      puts 'type: ' + x['type']
      puts 'title: ' + x['title'][0]
      puts
    end
  end

end

Lg.start(ARGV)
