var search_data = {"index":{"searchIndex":["cite","cites","hash","object","testresponse","doi2cit()","doi_search()","except()","get()","getcache()","getcite()","launch()","match()","match()","response_ok()","search()","search()","setcache()","setup()","show()","teardown()","test_doi_search_bibtex()","test_doi_search_json()","test_doi_search_text()","test_links_endpoint()","zotero()","gemfile","gemfile.lock","news","readme","rakefile","cites.gemspec"],"longSearchIndex":["cite","cites","hash","object","testresponse","cites::doi2cit()","testresponse#doi_search()","hash#except()","cite#get()","cites::getcache()","cites::getcite()","cite#launch()","cite#match()","cites::match()","object#response_ok()","cite#search()","cites::search()","cites::setcache()","testresponse#setup()","cites::show()","testresponse#teardown()","testresponse#test_doi_search_bibtex()","testresponse#test_doi_search_json()","testresponse#test_doi_search_text()","testresponse#test_links_endpoint()","object::zotero()","","","","","",""],"info":[["Cite","","Cite.html","",""],["Cites","","Cites.html","",""],["Hash","","Hash.html","",""],["Object","","Object.html","",""],["TestResponse","","TestResponse.html","",""],["doi2cit","Cites","Cites.html#method-c-doi2cit","(doi, format='text', style='apa', locale='en-US', cache=true)","<p>Get a citation in various formats from a DOI\n<p>Args:\n<p>doi: A DOI\n"],["doi_search","TestResponse","TestResponse.html#method-i-doi_search","(correct_response, format)",""],["except","Hash","Hash.html#method-i-except","(which)",""],["get","Cite","Cite.html#method-i-get","(tt)",""],["getcache","Cites","Cites.html#method-c-getcache","()",""],["getcite","Cites","Cites.html#method-c-getcite","(doi, format='text', style='apa', locale='en-US', cache=true)","<p>Get a single citation in various formats from a DOI\n<p>Args:\n<p>doi: A DOI\n"],["launch","Cite","Cite.html#method-i-launch","(doi)",""],["match","Cite","Cite.html#method-i-match","(tt)","<p>method_options :doi =&gt; :boolean\n"],["match","Cites","Cites.html#method-c-match","(query)","<p>match: Look for matches to free-form citations to DOIs for an object\n(article, book, etc). in CrossRef …\n"],["response_ok","Object","Object.html#method-i-response_ok","(code)",""],["search","Cite","Cite.html#method-i-search","(tt)",""],["search","Cites","Cites.html#method-c-search","(query, options = {})","<p>search: Search for scholary objects in CrossRef\n<p>Args:\n<p>query: A single or many terms (in an array). This …\n"],["setcache","Cites","Cites.html#method-c-setcache","(directory)",""],["setup","TestResponse","TestResponse.html#method-i-setup","()",""],["show","Cites","Cites.html#method-c-show","(input)",""],["teardown","TestResponse","TestResponse.html#method-i-teardown","()",""],["test_doi_search_bibtex","TestResponse","TestResponse.html#method-i-test_doi_search_bibtex","()",""],["test_doi_search_json","TestResponse","TestResponse.html#method-i-test_doi_search_json","()",""],["test_doi_search_text","TestResponse","TestResponse.html#method-i-test_doi_search_text","()",""],["test_links_endpoint","TestResponse","TestResponse.html#method-i-test_links_endpoint","()",""],["zotero","Object","Object.html#method-c-zotero","(query, usergroup = nil)","<p>usergroup = “myrmecocystus” stuff\n"],["Gemfile","","Gemfile.html","","<p>source &#39;rubygems.org&#39;\n<p># Specify your gem&#39;s dependencies in cites.gemspec gemspec\n"],["Gemfile.lock","","Gemfile_lock.html","","<p>PATH\n\n<pre>remote: .\nspecs:\n  cites (0.1.0)\n    api_cache (~&gt; 0.2)\n    bibtex-ruby (~&gt; 3.0)\n    httparty (~&gt; ...</pre>\n"],["NEWS","","NEWS_md.html","","<p>CHANGES IN VERSION 0.1.0 (2014-04-19)\n<p>Major changes\n<p>Development system overhaul\n"],["README","","README_md.html","","<p>cites\n<p><strong>this is alpha software, so expect changes</strong>\n<p>What it is?\n"],["Rakefile","","Rakefile.html","","<p>require “bundler/gem_tasks” require &#39;rake/testtask&#39;\n<p>Rake::TestTask.new do |t|\n\n<pre>t.libs ...</pre>\n"],["cites.gemspec","","cites_gemspec.html","","<p>lib = File.expand_path(&#39;../lib&#39;, __FILE__) $LOAD_PATH.unshift(lib)\nunless $LOAD_PATH.include?(lib) …\n"]]}}