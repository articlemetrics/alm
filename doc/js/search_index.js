var search_data = {"index":{"searchIndex":["alm","alm","object","testresponse","alerts()","alm()","alm()","doi_search()","getuserinfo()","ifnot()","join_ids()","pick_url()","pick_url_alerts()","requests()","response_ok()","setup()","signposts()","status()","str_length()","teardown()","test_doi_search_bibtex()","test_doi_search_json()","test_doi_search_text()","test_length()","test_links_endpoint()","type_check()","gemfile","gemfile.lock","makefile","news","readme","rakefile","thorfile","alm.gemspec"],"longSearchIndex":["alm","alm","object","testresponse","alm::alerts()","alm::alm()","alm#alm()","testresponse#doi_search()","object#getuserinfo()","object#ifnot()","object#join_ids()","object#pick_url()","object#pick_url_alerts()","alm::requests()","object#response_ok()","testresponse#setup()","alm::signposts()","alm::status()","object#str_length()","testresponse#teardown()","testresponse#test_doi_search_bibtex()","testresponse#test_doi_search_json()","testresponse#test_doi_search_text()","object#test_length()","testresponse#test_links_endpoint()","object#type_check()","","","","","","","",""],"info":[["Alm","","Alm.html","",""],["Alm","","Alm.html","",""],["Object","","Object.html","",""],["TestResponse","","TestResponse.html","",""],["alerts","Alm","Alm.html#method-c-alerts","(source: nil, ids: nil, class_name: nil, level: nil, q: nil, unresolved: nil, per_page: 50, page: 1, user: nil, pwd: nil, instance: 'plos', options: {})",""],["alm","Alm","Alm.html#method-c-alm","(ids: nil, type: nil, info: 'summary', source: nil, publisher: nil, order: nil, per_page: 50, page: 1, instance: 'plos', key: nil, options: {})","<p>Get a single citation in various formats from a DOI\n<p>Args:\n<p>ids: One or more DOIs\n"],["alm","Alm","Alm.html#method-i-alm","(tt)",""],["doi_search","TestResponse","TestResponse.html#method-i-doi_search","(correct_response, format)",""],["getuserinfo","Object","Object.html#method-i-getuserinfo","(x: nil, y: nil)",""],["ifnot","Object","Object.html#method-i-ifnot","(x, y)",""],["join_ids","Object","Object.html#method-i-join_ids","(x)","<p>def test_values(name, input, values)\n\n<pre class=\"ruby\"><span class=\"ruby-keyword\">if</span> <span class=\"ruby-identifier\">input</span>.<span class=\"ruby-identifier\">class</span> <span class=\"ruby-operator\">==</span> <span class=\"ruby-constant\">String</span><span class=\"ruby-operator\">:</span>\n  <span class=\"ruby-identifier\">input</span> = <span class=\"ruby-identifier\">input</span>.<span class=\"ruby-identifier\">split</span>(<span class=\"ruby-string\">&#39; &#39;</span>)\n<span class=\"ruby-keyword\">if</span> <span class=\"ruby-identifier\">type</span>(<span class=\"ruby-identifier\">input</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["pick_url","Object","Object.html#method-i-pick_url","(x)",""],["pick_url_alerts","Object","Object.html#method-i-pick_url_alerts","(x)",""],["requests","Alm","Alm.html#method-c-requests","(key: nil, instance: 'plos', options: {})",""],["response_ok","Object","Object.html#method-i-response_ok","(code)",""],["setup","TestResponse","TestResponse.html#method-i-setup","()",""],["signposts","Alm","Alm.html#method-c-signposts","(ids: nil, type: nil, info: 'summary', source: nil, publisher: nil, order: nil, per_page: 50, page: 1, instance: 'plos', key: nil, options: {})",""],["status","Alm","Alm.html#method-c-status","(key: nil, instance: 'plos', options: {})",""],["str_length","Object","Object.html#method-i-str_length","(x)",""],["teardown","TestResponse","TestResponse.html#method-i-teardown","()",""],["test_doi_search_bibtex","TestResponse","TestResponse.html#method-i-test_doi_search_bibtex","()",""],["test_doi_search_json","TestResponse","TestResponse.html#method-i-test_doi_search_json","()",""],["test_doi_search_text","TestResponse","TestResponse.html#method-i-test_doi_search_text","()",""],["test_length","Object","Object.html#method-i-test_length","(input)",""],["test_links_endpoint","TestResponse","TestResponse.html#method-i-test_links_endpoint","()",""],["type_check","Object","Object.html#method-i-type_check","(arg, type=String)",""],["Gemfile","","Gemfile.html","","<p>source &#39;rubygems.org&#39;\n<p>gemspec\n"],["Gemfile.lock","","Gemfile_lock.html","","<p>PATH\n\n<pre>remote: .\nspecs:\n  alm (0.1.0)\n    httparty (~&gt; 0.12)\n    json (~&gt; 1.8)\n    launchy (~&gt; 2.4, &gt;= 2.4.2) ...</pre>\n"],["Makefile","","Makefile.html","","<p>all: build install\n<p>build:\n\n<pre>gem build alm.gemspec</pre>\n"],["NEWS","","NEWS_md.html","","<p>CHANGES IN VERSION 0.0.1.99 (2014-12-04)\n<p>started gem\n\n"],["README","","README_md.html","","<p>alm\n<p><img src=\"https://api.travis-ci.org/sckott/alm.png\">\n<p><strong>This is alpha software, so expect changes</strong>\n"],["Rakefile","","Rakefile.html","","<p>require “bundler/gem_tasks” require &#39;rake/testtask&#39;\n<p>Rake::TestTask.new do |t|\n\n<pre>t.libs ...</pre>\n"],["Thorfile","","Thorfile.html","","<p># module: alm\n<p>require “thor”\n<p>class Alm &lt; Thor\n"],["alm.gemspec","","alm_gemspec.html","","<p>lib = File.expand_path(&#39;../lib&#39;, __FILE__) $LOAD_PATH.unshift(lib)\nunless $LOAD_PATH.include?(lib) …\n"]]}}